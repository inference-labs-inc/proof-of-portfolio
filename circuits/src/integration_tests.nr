use crate::{main, MAX_SIGNALS};
use components::core::merkle::{MERKLE_DEPTH, TradingSignal};

#[test]
fn test_main_comprehensive() {
    let mut signals: [TradingSignal; MAX_SIGNALS] = [
        TradingSignal {
            miner_hotkey: [0, 0],
            trade_pair_id: 0,
            order_type: 0,
            leverage_scaled: 0,
            price_scaled: 0,
            processed_ms: 0,
            order_uuid: [0, 0],
            position_uuid: [0, 0],
            src: 0,
        }; MAX_SIGNALS
    ];

    let mut path_elements: [[Field; MERKLE_DEPTH]; MAX_SIGNALS] = [[0; MERKLE_DEPTH]; MAX_SIGNALS];
    let mut path_indices: [[Field; MERKLE_DEPTH]; MAX_SIGNALS] = [[0; MERKLE_DEPTH]; MAX_SIGNALS];

    signals[0] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 1,
        leverage_scaled: 100,
        price_scaled: 10000,
        processed_ms: 1000,
        order_uuid: [0x1111111111111111, 0x1111111111111111],
        position_uuid: [0x1111111111111111, 0x1111111111111111],
        src: 0,
    };

    signals[1] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 2,
        leverage_scaled: 100,
        price_scaled: 11000,
        processed_ms: 2000,
        order_uuid: [0x2222222222222222, 0x2222222222222222],
        position_uuid: [0x1111111111111111, 0x1111111111111111],
        src: 0,
    };

    signals[2] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 3,
        leverage_scaled: 200,
        price_scaled: 20000,
        processed_ms: 3000,
        order_uuid: [0x3333333333333333, 0x3333333333333333],
        position_uuid: [0x3333333333333333, 0x3333333333333333],
        src: 0,
    };

    signals[3] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 4,
        leverage_scaled: 200,
        price_scaled: 22000,
        processed_ms: 4000,
        order_uuid: [0x4444444444444444, 0x4444444444444444],
        position_uuid: [0x3333333333333333, 0x3333333333333333],
        src: 0,
    };

    let merkle_root = 17778988922844651442151524199383189727498865359869084356161872608149992587898;

    path_elements[0] = [
        8781215305724307628835403280524336936587049080265562041152212763888318503359,
        21490756228577710735950935021877232011445636450711537213489200520795247189645,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];

    path_elements[1] = [
        17762954458073036958861945586046332209667636781269149246938955777350607148928,
        21490756228577710735950935021877232011445636450711537213489200520795247189645,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];

    path_elements[2] = [
        3641776793531986931181281397794217059459482562702454618131897047572088815809,
        4589497288377546194122123976702970320181708730828338831968005913637464806590,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];

    path_elements[3] = [
        12596019441992312074438192691112263080696322744213819261376931246809309621715,
        4589497288377546194122123976702970320181708730828338831968005913637464806590,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];

    path_indices[0] = [0, 0, 0, 0, 0, 0, 0, 0];
    path_indices[1] = [1, 0, 0, 0, 0, 0, 0, 0];
    path_indices[2] = [0, 1, 0, 0, 0, 0, 0, 0];
    path_indices[3] = [1, 1, 0, 0, 0, 0, 0, 0];

    let risk_free = 419;
    let actual_len = 4;

    let result = main(
        signals,
        actual_len,
        path_elements,
        path_indices,
        merkle_root,
        risk_free,
    );

    assert(result.len() == 9);

    assert(result[0] != 0);
    assert(result[1] != 0);
    assert(result[3] != 0);
}

#[test]
fn test_basic_functionality() {
    let mut signals: [TradingSignal; MAX_SIGNALS] = [
        TradingSignal {
            miner_hotkey: [0, 0],
            trade_pair_id: 0,
            order_type: 0,
            leverage_scaled: 0,
            price_scaled: 0,
            processed_ms: 0,
            order_uuid: [0, 0],
            position_uuid: [0, 0],
            src: 0,
        }; MAX_SIGNALS
    ];

    let mut path_elements: [[Field; MERKLE_DEPTH]; MAX_SIGNALS] = [[0; MERKLE_DEPTH]; MAX_SIGNALS];
    let mut path_indices: [[Field; MERKLE_DEPTH]; MAX_SIGNALS] = [[0; MERKLE_DEPTH]; MAX_SIGNALS];

    signals[0] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 1,
        leverage_scaled: 100,
        price_scaled: 10000,
        processed_ms: 1000,
        order_uuid: [0x1111111111111111, 0x1111111111111111],
        position_uuid: [0x1111111111111111, 0x1111111111111111],
        src: 0,
    };

    signals[1] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 2,
        leverage_scaled: 100,
        price_scaled: 11000,
        processed_ms: 2000,
        order_uuid: [0x2222222222222222, 0x2222222222222222],
        position_uuid: [0x1111111111111111, 0x1111111111111111],
        src: 0,
    };

    signals[2] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 3,
        leverage_scaled: 200,
        price_scaled: 20000,
        processed_ms: 3000,
        order_uuid: [0x3333333333333333, 0x3333333333333333],
        position_uuid: [0x3333333333333333, 0x3333333333333333],
        src: 0,
    };

    signals[3] = TradingSignal {
        miner_hotkey: [0, 0],
        trade_pair_id: 0,
        order_type: 4,
        leverage_scaled: 200,
        price_scaled: 22000,
        processed_ms: 4000,
        order_uuid: [0x4444444444444444, 0x4444444444444444],
        position_uuid: [0x3333333333333333, 0x3333333333333333],
        src: 0,
    };

    let merkle_root = 17778988922844651442151524199383189727498865359869084356161872608149992587898;
    path_elements[0] = [
        8781215305724307628835403280524336936587049080265562041152212763888318503359,
        21490756228577710735950935021877232011445636450711537213489200520795247189645,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];
    path_elements[1] = [
        17762954458073036958861945586046332209667636781269149246938955777350607148928,
        21490756228577710735950935021877232011445636450711537213489200520795247189645,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];
    path_elements[2] = [
        3641776793531986931181281397794217059459482562702454618131897047572088815809,
        4589497288377546194122123976702970320181708730828338831968005913637464806590,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];
    path_elements[3] = [
        12596019441992312074438192691112263080696322744213819261376931246809309621715,
        4589497288377546194122123976702970320181708730828338831968005913637464806590,
        15315010434373228768515045847926951401477884091230007539886053341418284848464,
        5337862867875115524214345623787399434458805399542698299566394924328104755643,
        3120476356109763337029616398980250392595092048585115036648644377950387540381,
        1713640813182293640789595917939697287037938209669543521747647487822835744672,
        9870578620418080934067112655515947531367044167924989913367448386461769503295,
        17440229081536261521163509218823958459090345145899915276583598585919842079403,
    ];
    path_indices[0] = [0, 0, 0, 0, 0, 0, 0, 0];
    path_indices[1] = [1, 0, 0, 0, 0, 0, 0, 0];
    path_indices[2] = [0, 1, 0, 0, 0, 0, 0, 0];
    path_indices[3] = [1, 1, 0, 0, 0, 0, 0, 0];

    let risk_free = 100;
    let actual_len = 4;

    let result = main(
        signals,
        actual_len,
        path_elements,
        path_indices,
        merkle_root,
        risk_free,
    );

    assert(result.len() == 9);
}
